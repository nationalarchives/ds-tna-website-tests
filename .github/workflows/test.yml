name: Run tests

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      domain:
        type: string
        description: Domain to test
        required: true
        default: "https://www.nationalarchives.gov.uk/"
      include-tests:
        type: string
        description: Test tags to run, separated with a pipe "|" (leave blank to run all tests)
        required: false
        default: ""
      exclude-tests:
        type: string
        description: Test tags to exclude, separated with a pipe "|"
        required: false
        default: "@dev"
      notify-slack:
        type: boolean
        description: Send test results to Slack
        required: true
        default: true
  # schedule:
  #   - cron: "0 4 * * *" # Every day at 04:00

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Santisie domain
        id: santisie-domain
        run: |
          DOMAIN=$(echo "${{ inputs.domain }}" | sed 's:/*$::')
          echo "DOMAIN=$DOMAIN" >> "$GITHUB_OUTPUT"
      - uses: actions/setup-node@v4
        with:
          node-version: lts/jod
      - name: Install test dependencies
        run: npm ci
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Install jq
        run: sudo apt-get install jq
      - name: Run tests
        run: TEST_DOMAIN=${{ steps.santisie-domain.outputs.DOMAIN }} CI=true npx playwright test --grep "${{ inputs.include-tests }}" --grep-invert "${{ inputs.exclude-tests }}"
      - name: Report summary
        if: always()
        id: report-summary
        run: |
          PASS_COUNT=$(jq '(.stats.expected)' test-results.json)
          FAIL_COUNT=$(jq '(.stats.unexpected)' test-results.json)
          SKIP_COUNT=$(jq '(.stats.skipped)' test-results.json)
          FLAKE_COUNT=$(jq '(.stats.flaky)' test-results.json)
          DURATION=$(jq '(.stats.duration/1000|tonumber|floor)' test-results.json)
          echo "PASS_COUNT=$PASS_COUNT" >> "$GITHUB_OUTPUT"
          echo "FAIL_COUNT=$FAIL_COUNT" >> "$GITHUB_OUTPUT"
          echo "SKIP_COUNT=$SKIP_COUNT" >> "$GITHUB_OUTPUT"
          echo "FLAKE_COUNT=$FLAKE_COUNT" >> "$GITHUB_OUTPUT"
          echo "DURATION=$DURATION" >> "$GITHUB_OUTPUT"
    outputs:
      pass_count: ${{ steps.report-summary.outputs.PASS_COUNT }}
      fail_count: ${{ steps.report-summary.outputs.FAIL_COUNT }}
      skip_count: ${{ steps.report-summary.outputs.SKIP_COUNT }}
      flake_count: ${{ steps.report-summary.outputs.FLAKE_COUNT }}
      duration: ${{ steps.report-summary.outputs.DURATION }}
      domain: ${{ steps.santisie-domain.outputs.DOMAIN }}

  notify-slack:
    runs-on: ubuntu-latest
    needs: test
    if: always() && inputs.notify-slack && needs.test.outputs.pass_count
    steps:
      - uses: actions/checkout@v4
      - name: Create report summary
        id: report
        run: |
          touch report.txt
          echo "Domain: **${{ needs.test.outputs.domain }}**" >> report.txt
          echo >> report.txt
          [[ -n "${{ inputs.include-tests }}" ]] && echo "- Included: \`${{ inputs.include-tests }}\`" >> report.txt
          [[ -n "${{ inputs.exclude-tests }}" ]] && echo "- Excluded: \`${{ inputs.exclude-tests }}\`" >> report.txt
          echo >> report.txt
          echo >> report.txt && echo "✅ **${{ needs.test.outputs.pass_count }}** tests passed" >> report.txt
          echo >> report.txt && echo "❌ **${{ needs.test.outputs.fail_count }}** tests failed" >> report.txt
          [[ "${{ needs.test.outputs.skip_count }}" -gt 0 ]] && echo >> report.txt && echo "🙈 **${{ needs.test.outputs.skip_count }}** tests skipped" >> report.txt
          [[ "${{ needs.test.outputs.flake_count }}" -gt 0 ]] && echo >> report.txt && echo "🤕 **${{ needs.test.outputs.flake_count }}** flaky tests" >> report.txt
          echo >> report.txt && echo "⏰ Time taken: **${{ needs.test.outputs.duration }}** seconds" >> report.txt
          echo >> report.txt && echo "[📋 Full report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) | [𝍌 Source code](${{ github.server_url }}/${{ github.repository }}/tree/main/tests) | [🧪 Development tests](${{ github.server_url }}/search?q=repo%3A${{ github.repository_owner }}%2F${{ github.event.repository.name }}+%28%40dev%29+language%3ATypeScript&type=code&l=TypeScript)" >> report.txt
          cat report.txt
          {
            echo 'REPORT<<EOF'
            cat report.txt
            echo EOF
          } >> "$GITHUB_OUTPUT"
      - uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: "TNA Website Test Results"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON: "https://raw.githubusercontent.com/nationalarchives/tna-frontend/main/src/nationalarchives/assets/images/apple-touch-icon.png"
          SLACK_ICON_EMOJI: ":test_tube:"
          MSG_MINIMAL: true
          SLACK_COLOR: "${{ needs.test.outputs.fail_count == '0' && 'good' || 'danger' }}"
          ENABLE_ESCAPES: true
          SLACKIFY_MARKDOWN: true
          SLACK_MESSAGE: ${{ steps.report.outputs.REPORT }}
