name: Run website Playwright tests

inputs:
  domain:
    type: string
    description: Domain to test
    required: true
  include-tests:
    type: string
    description: Test tags to run
    required: false
  exclude-tests:
    type: string
    description: Test tags to exclude
    required: false

outputs:
  pass-count:
    description: The number of passed tests
    value: ${{ steps.report-summary.outputs.PASS_COUNT }}
  fail-count:
    description: The number of failed tests
    value: ${{ steps.report-summary.outputs.FAIL_COUNT }}
  skip-count:
    description: The number of skipped tests
    value: ${{ steps.report-summary.outputs.SKIP_COUNT }}
  flake-count:
    description: The number of flaky tests
    value: ${{ steps.report-summary.outputs.FLAKE_COUNT }}
  duration:
    description: The number of seconds the test suite took to run
    value: ${{ steps.report-summary.outputs.DURATION }}
  domain:
    description: The sanitised domain used
    value: ${{ steps.santisie-domain.outputs.DOMAIN }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: lts/jod
    - name: Install test dependencies
      run: npm ci
      shell: bash
    - name: Install Playwright
      run: npx playwright install --with-deps
      shell: bash
    - name: Install jq
      run: sudo apt-get install jq
      shell: bash
    - name: Santisie domain
      id: santisie-domain
      run: |
        DOMAIN=$(echo "${{ inputs.domain }}" | sed 's:/*$::')
        echo "DOMAIN=$DOMAIN" >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Run tests
      run: TEST_DOMAIN=${{ inputs.domain }} CI=true npx playwright test --grep "${{ inputs.include-tests }}" --grep-invert "${{ inputs.exclude-tests }}"
      shell: bash
    - name: Report summary
      if: always()
      id: report-summary
      run: |
        PASS_COUNT=$(jq '(.stats.expected)' test-results.json)
        FAIL_COUNT=$(jq '(.stats.unexpected)' test-results.json)
        SKIP_COUNT=$(jq '(.stats.skipped)' test-results.json)
        FLAKE_COUNT=$(jq '(.stats.flaky)' test-results.json)
        DURATION=$(jq '(.stats.duration/1000|tonumber|floor)' test-results.json)
        echo "PASS_COUNT=$PASS_COUNT" >> "$GITHUB_OUTPUT"
        echo "FAIL_COUNT=$FAIL_COUNT" >> "$GITHUB_OUTPUT"
        echo "SKIP_COUNT=$SKIP_COUNT" >> "$GITHUB_OUTPUT"
        echo "FLAKE_COUNT=$FLAKE_COUNT" >> "$GITHUB_OUTPUT"
        echo "DURATION=$DURATION" >> "$GITHUB_OUTPUT"
      shell: bash
